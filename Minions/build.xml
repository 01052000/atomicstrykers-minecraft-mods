<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================


     Minions
     Tiny immortal servants to do your biddings!

     AtomicStryker
     ====================================================================== -->
<project name="Minions" default="build">

	<!-- Name here -->
	<property name="author" value="AtomicStryker" />

	<!-- Choose ".zip" or ".jar" as the dist file extension -->
	<property name="filetype" value="zip" />

	<!-- Tool directory relative to this file -->
	<property name="tool.dir" location="./../../forgegradle" />

	<!-- Source folder locations relative to this file -->
	<property name="common.src.dir" location="./src" />

	<!-- Directory for the packaged result, relative to this file -->
	<property name="dist.dir" location="./dist" />

	<!-- Directory for reobfuscated files, relative to this file -->
	<property name="build.dir" location="./build" />

	<!-- Tool directories -->
	<property name="tool.srcdir" location="${tool.dir}/src/main/java" />

	<!-- Tool executable -->
	<property name="toolexec" location="${tool.dir}/gradlew.bat" />

	<!-- This method fetches the mc version we're building for from the properties file -->
	<loadfile srcfile="./../properties" property="version">
		<filterchain>
			<linecontains>
				<contains value="mcversion=" />
			</linecontains>
			<tokenfilter>
				<replacestring from="mcversion=" to="" />
			</tokenfilter>
		</filterchain>
	</loadfile>
	<echo message="mcversion read from file: ${version}" />

	<!-- This method deletes old folders and prepares fresh ones -->
	<target name="init" description="Initialize build environment">
		<echo message="Cleaning old build and dist, MCP reobf directories" />
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${tool.dir}/src" />
		<delete dir="${tool.dir}/bin" />

		<echo message="Creating build and dist dirs" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${tool.dir}/src/main/resources" />
	</target>

	<!-- This method detects files in the source folders and copies them into the MCP source folders -->
	<target name="mergesources" depends="init">
		<copy todir="${tool.srcdir}" overwrite="true" verbose="true">
			<fileset dir="${common.src.dir}" includes="**/*.java" />
		</copy>
	</target>

	<target name="reobfuscate" description="gradle reobfuscate">
		<exec executable="${toolexec}" dir="${tool.dir}">
			<arg value="clean" />
			<arg value="build" />
		</exec>
	</target>

	<target name="stage" description="Stage resources into build directory">
		<copy todir="${build.dir}">
			<zipfileset src="${tool.dir}/build/libs/modid.jar" excludes="META-INF/**, mcmod.info" />
		</copy>

		<!-- Copy mcmod.info and changelog.txt into distributable -->
		<copy file="./mcmod.info" todir="${build.dir}" />
		<copy file="./changelog.txt" todir="${build.dir}" />
		
		<!-- Copy non-code files in client source folder (eg textures) into distributable -->
		<copy todir="${build.dir}">
			<fileset dir="${common.src.dir}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="build" description="Perform all tasks for a build" depends="init, mergesources, reobfuscate, stage, jarzip, builddownload">
		<echo message="MCP Ant Build Completed!" />
	</target>

	<target name="jarzip" description="Jar (or zip) the project's dist output">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${ant.project.name}_${version}.${filetype}" duplicate="preserve" index="true" manifestencoding="UTF-8">
			<manifest>
				<attribute name="Built-By" value="a combination of cpw, AbrarSyed, gradle and ant scripts" />
				<attribute name="Implementation-Vendor" value="${author}" />
				<attribute name="Implementation-Title" value="${ant.project.name}" />
				<attribute name="Implementation-Version" value="${version}" />
			</manifest>
			<fileset dir="${build.dir}" />
		</jar>
	</target>

	<!-- Directory name for the finished modfile, inside the downloadable archive -->
	<property name="moddir" value="setup/mods" />

	<!-- Directory name for anything else to copy into the downloadable archive -->
	<property name="resources.dir" location="./resources" />

	<!-- Directory for the downloadable result, relative to this file -->
	<property name="download.dir" location="./download" />

	<!-- Directory for temp-packaging, relative to this file -->
	<property name="temp.dir" location="./temp" />

	<target name="builddownload" description="Build the final download Zip archive" depends ="include-updater">
		<delete dir="${download.dir}" />
		<mkdir dir="${temp.dir}" />

		<!-- Copy any additional files into download package -->
		<copy todir="${temp.dir}">
			<fileset dir="${resources.dir}" />
		</copy>

		<!-- Copy mod file into appropriate place in download archive -->
		<copy file="${dist.dir}/${ant.project.name}_${version}.${filetype}" todir="${temp.dir}/${moddir}" />

		<mkdir dir="${download.dir}" />
		<!-- Pack up temp folder to download archive -->
		<zip destfile="${download.dir}/${ant.project.name}_${version}.zip">
			<fileset dir="${temp.dir}" />
		</zip>

		<delete dir="${temp.dir}" />
	</target>

	<!-- Add Update Checker mod :3 -->
	<property name="updaterloc" location="./../UpdateCheckerMod/dist/UpdateCheckerMod_${version}.zip" />
	
	<target name="-check-use-file" unless="file.exists">
		<available property="file.exists" file="${updaterloc}" />
	</target>

	<target name="include-updater" depends="-check-use-file" if="${file.exists}">
		<echo message="updater found and included from: ${updaterloc}" />
		<copy file="${updaterloc}" todir="${temp.dir}/${moddir}" />
	</target>

</project>

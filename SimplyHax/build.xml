<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================


     Simply Hax
     Flying, Sprinting, Cave Vision, without base edits.

     AtomicStryker
     ====================================================================== -->
<project name="SimplyHax" default="build">

	<!-- Name here -->
	<property name="author" value="AtomicStryker" />

	<!-- Choose ".zip" or ".jar" as the dist file extension -->
	<property name="filetype" value="jar" />

	<!-- MCP directory relative to this file -->
	<property name="mcp.dir" location="./../../mcp" />

	<!-- Source folder locations relative to this file -->
	<property name="common.src.dir" location="./common" />
	<property name="client.src.dir" location="./minecraft" />

	<!-- Directory for the packaged result, relative to this file -->
	<property name="dist.dir" location="./dist" />

	<!-- Directory for reobfuscated files, relative to this file -->
	<property name="build.dir" location="./build" />

	<!-- MCP directories, shouldnt have to change this -->
	<property name="mcp.srcdir" location="${mcp.dir}/src" />
	<property name="client.mcp.srcdir" location="${mcp.srcdir}/minecraft" />
	<property name="common.mcp.srcdir" location="${mcp.srcdir}/common" />

	<!-- Update to point to your Python executable. Example: /usr/bin/python -->
	<!-- The following location is relative, for Windows: -->
	<property name="python" location="${mcp.dir}/runtime/bin/python/python_mcp.exe" />

	<!-- This method fetches the mc version we're building for from the properties file -->
	<loadfile srcfile="./../properties" property="version">
		<filterchain>
			<linecontains>
				<contains value="mcversion=" />
			</linecontains>
			<tokenfilter>
				<replacestring from="mcversion=" to="" />
			</tokenfilter>
		</filterchain>
	</loadfile>
	<echo message="mcversion read from file: ${version}" />

	<!-- This method deletes old folders and prepares fresh ones -->
	<target name="init" description="Initialize build environment">
		<echo message="Cleaning old build and dist, MCP reobf directories" />
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${mcp.dir}/reobf" />

		<echo message="Creating build and dist dirs" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<!-- This method detects sources in the source folders and copies them into the MCP source folders -->
	<target name="mergesources" depends="init">
		<copy todir="${client.mcp.srcdir}" overwrite="true" verbose="true">
			<fileset dir="${client.src.dir}" includes="**/*.java" />
		</copy>
		<copy todir="${common.mcp.srcdir}" overwrite="true" verbose="true">
			<fileset dir="${common.src.dir}" includes="**/*.java" />
		</copy>
	</target>

	<target name="recompile" description="MCP recompile">
		<exec executable="${python}" dir="${mcp.dir}">
			<arg value="runtime/recompile.py" />
			<arg value="%*" />
		</exec>
	</target>

	<target name="reobfuscate" description="MCP reobfuscate">
		<exec executable="${python}" dir="${mcp.dir}">
			<arg value="runtime/reobfuscate.py" />
			<arg value="%*" />
		</exec>
	</target>

	<target name="clean" description="MCP clean-source">
		<antcall target="clean-source" />
		<!-- <exec executable="${python}" dir="${mcp.dir}">
			<arg value="runtime/updatemd5.py" />
			<arg value="-f" />
		</exec> -->
	</target>

	<!-- This method detects sources in MCP source folders that are duplicates of your mod sources, and deletes them -->
	<!-- Thus, you get your previous MCP source setup back without having to decompile and setup again -->
	<target name="clean-source">
		<delete verbose="true">
			<fileset dir="${client.mcp.srcdir}">
				<present present="both" targetdir="${client.src.dir}" />
			</fileset>
			<fileset dir="${common.mcp.srcdir}">
				<present present="both" targetdir="${common.src.dir}" />
			</fileset>
		</delete>
	</target>

	<target name="stage" description="Stage resources into build directory">
		<copy todir="${build.dir}">
			<fileset dir="${mcp.dir}/reobf/minecraft" excludes=".svn/**, *.txt" />
		</copy>

		<!-- Copy stuff into distributable -->
		<copy file="./mcmod.info" todir="${build.dir}" />
		<copy file="./changelog.txt" todir="${build.dir}" />

		<!-- Copy non-code files in client source folder (eg textures) into distributable -->
		<copy todir="${build.dir}">
			<fileset dir="${client.src.dir}" excludes="**/*.java" />
		</copy>

	</target>

	<target name="build" description="Perform all tasks for a build" depends="init, mergesources, recompile, reobfuscate, stage, jarzip, clean, builddownload">
		<echo message="MCP Ant Build Completed!" />
	</target>

	<target name="jarzip" description="Jar (or zip) the project's dist output">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${dist.dir}/${ant.project.name}_${version}.${filetype}" duplicate="preserve" index="true" manifestencoding="UTF-8" manifest="./MANIFEST.MF">
			<fileset dir="${build.dir}" />
		</jar>
	</target>

	<!-- Directory name for the finished modfile, inside the downloadable archive -->
	<property name="moddir" value="setup/coremods" />

	<!-- Directory name for anything else to copy into the downloadable archive -->
	<property name="resources.dir" location="./resources" />

	<!-- Directory for the downloadable result, relative to this file -->
	<property name="download.dir" location="./download" />

	<!-- Directory for temp-packaging, relative to this file -->
	<property name="temp.dir" location="./temp" />

	<target name="builddownload" description="Build the final download Zip archive" depends="include-updater">
		<delete dir="${download.dir}" />
		<mkdir dir="${temp.dir}" />

		<!-- Copy source code and files into download -->
		<mkdir dir="${temp.dir}/src" />
		<mkdir dir="${temp.dir}/src/common" />
		<mkdir dir="${temp.dir}/src/minecraft" />
		<copy todir="${temp.dir}/src/common">
			<fileset dir="${common.src.dir}" />
		</copy>
		<copy todir="${temp.dir}/src/minecraft">
			<fileset dir="${client.src.dir}" />
		</copy>
		
		<!-- Copy any additional files into download package -->
		<copy todir="${temp.dir}">
			<fileset dir="${resources.dir}" />
		</copy>

		<!-- Copy mod file into appropriate place in download archive -->
		<copy file="${dist.dir}/${ant.project.name}_${version}.${filetype}" todir="${temp.dir}/${moddir}" />

		<mkdir dir="${download.dir}" />
		<!-- Pack up temp folder to download archive -->
		<zip destfile="${download.dir}/${ant.project.name}_${version}.zip">
			<fileset dir="${temp.dir}" />
		</zip>

		<delete dir="${temp.dir}" />
	</target>

	<!-- Add Update Checker mod :3 -->
	<property name="updaterloc" location="./../UpdateCheckerMod/dist/UpdateCheckerMod_${version}.zip" />

	<target name="-check-use-file" unless="file.exists">
		<available property="file.exists" file="${updaterloc}" />
	</target>

	<target name="include-updater" depends="-check-use-file" if="${file.exists}">
		<echo message="updater found and included from: ${updaterloc}" />
		<copy file="${updaterloc}" todir="${temp.dir}/${moddir}/../mods" />
	</target>

</project>
